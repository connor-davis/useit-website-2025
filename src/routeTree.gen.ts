/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StoryImport } from './routes/story'
import { Route as ProjectsImport } from './routes/projects'
import { Route as MediaImport } from './routes/media'
import { Route as ContactUsImport } from './routes/contact-us'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const StoryRoute = StoryImport.update({
  id: '/story',
  path: '/story',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const MediaRoute = MediaImport.update({
  id: '/media',
  path: '/media',
  getParentRoute: () => rootRoute,
} as any)

const ContactUsRoute = ContactUsImport.update({
  id: '/contact-us',
  path: '/contact-us',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/contact-us': {
      id: '/contact-us'
      path: '/contact-us'
      fullPath: '/contact-us'
      preLoaderRoute: typeof ContactUsImport
      parentRoute: typeof rootRoute
    }
    '/media': {
      id: '/media'
      path: '/media'
      fullPath: '/media'
      preLoaderRoute: typeof MediaImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/story': {
      id: '/story'
      path: '/story'
      fullPath: '/story'
      preLoaderRoute: typeof StoryImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contact-us': typeof ContactUsRoute
  '/media': typeof MediaRoute
  '/projects': typeof ProjectsRoute
  '/story': typeof StoryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contact-us': typeof ContactUsRoute
  '/media': typeof MediaRoute
  '/projects': typeof ProjectsRoute
  '/story': typeof StoryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/contact-us': typeof ContactUsRoute
  '/media': typeof MediaRoute
  '/projects': typeof ProjectsRoute
  '/story': typeof StoryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/contact-us' | '/media' | '/projects' | '/story'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/contact-us' | '/media' | '/projects' | '/story'
  id: '__root__' | '/' | '/contact-us' | '/media' | '/projects' | '/story'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactUsRoute: typeof ContactUsRoute
  MediaRoute: typeof MediaRoute
  ProjectsRoute: typeof ProjectsRoute
  StoryRoute: typeof StoryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactUsRoute: ContactUsRoute,
  MediaRoute: MediaRoute,
  ProjectsRoute: ProjectsRoute,
  StoryRoute: StoryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/contact-us",
        "/media",
        "/projects",
        "/story"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/contact-us": {
      "filePath": "contact-us.tsx"
    },
    "/media": {
      "filePath": "media.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx"
    },
    "/story": {
      "filePath": "story.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
